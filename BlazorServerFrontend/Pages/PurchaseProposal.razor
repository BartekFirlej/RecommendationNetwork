@page "/purchaseproposal"

@using BlazorServerFrontend.Services
@using BlazorServerFrontend.DTOs

@inject PurchaseProposalsService PurchaseProposalsService

<h1>Purchase Proposal</h1>

<EditForm Model="purchaseProposalRequest" OnValidSubmit="HandleValidSubmit">
    <div class="form-group">
        <label for="customerId">Customer ID:</label>
        <InputNumber id="customerId" class="form-control" @bind-Value="purchaseProposalRequest.CustomerId" />
    </div>

    <button class="btn btn-primary" type="submit">Get Proposal</button>
</EditForm>

@if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
}

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (purchaseProposal != null)
{
    <table class="table">
        <thead>
            <tr>
                <th class="center-align">Date</th>
                <th class="center-align">Product Type Name</th>
                <th class="center-align">Product Name</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="center-align">@purchaseProposal.Date.ToString("yyyy-MM-dd")</td>
                <td class="center-align">@purchaseProposal.ProductTypeName</td>
                <td class="center-align">@purchaseProposal.ProductName</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private PurchaseProposalResponse purchaseProposal;
    private PurchaseProposalRequest purchaseProposalRequest = new PurchaseProposalRequest();
    private string errorMessage;
    private string successMessage;

    private async Task HandleValidSubmit()
    {
        await GetPurchaseProposal(purchaseProposalRequest);
    }

    private async Task GetPurchaseProposal(PurchaseProposalRequest customerRequest)
    {
        errorMessage = null;
        successMessage = null;
        purchaseProposal = null;

        if (customerRequest.CustomerId > 0)
        {
            try
            {
                purchaseProposal = await PurchaseProposalsService.GetPurchaseProposalAsync(customerRequest);
                successMessage = $"Purchase proposal for customer ID {customerRequest.CustomerId} successfully retrieved.";
            }
            catch (Exception ex)
            {
                errorMessage = $"Not found proposal for customer with ID {customerRequest.CustomerId}. Error: {ex.Message}";
            }
            StateHasChanged();
        }
        else
        {
            errorMessage = "Customer Id must be greater than 0.";
        }
    }
}