@page "/purchases"

@using BlazorServerFrontend.Services
@using BlazorServerFrontend.DTOs

@inject PurchasesService PurchasesService
@inject NavigationManager NavigationManager

<h1>Purchase History</h1>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

<table class="table">
    <thead>
        <tr>
            <th class="center-align">Purchase Id</th>
            <th class="center-align">Purchase Date</th>
            <th class="center-align">Customer</th>
            <th class="center-align">Recommender</th>
            <th class="center-align">Amount</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (purchases != null)
        {
            @foreach (var purchase in purchases.PagedItems)
            {
                <tr>
                    <td class="center-align">@purchase.Id</td>
                    <td class="center-align">@purchase.PurchaseDate.Date.ToString("yyyy-MM-dd")</td>
                    <td class="center-align">@purchase.CustomerName @(" ") @purchase.CustomerLastName</td>
                    <td class="center-align">
                        @(purchase.RecommenderName != null ? purchase.RecommenderName + " " + purchase.RecommenderLastName : "")
                    </td>
                    <td class="center-align">@purchase.Amount.ToString("C")</td>
                    <td class="center-align">
                        <button class="btn btn-primary" @onclick="() => AddToCart(purchase)">View details</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="pagination">
    <button class="btn btn-primary" @onclick="() => PreviousPage()" disabled="@IsPreviousButtonDisabled">Previous Page</button>
    <button class="btn btn-primary" @onclick="() => NextPage()" disabled="@IsNextButtonDisabled">Next Page</button>
</div>

@code {
    private int itemsPerPage = 10;
    private int currentPage = 1;
    private PagedList<PurchaseResponse> purchases = new PagedList<PurchaseResponse>()
        {
            HasNextPage = true,
            PagedItems = new List<PurchaseResponse>(),
            PageIndex = 1,
            PageSize = 10
        };
    private bool IsPreviousButtonDisabled => currentPage <= 1;
    private bool IsNextButtonDisabled => !purchases.HasNextPage;
    private string errorMessage;

    private async Task FetchProductsAsync()
    {
        try
        {
            purchases = await PurchasesService.GetPurchasesPagedAsync(currentPage, itemsPerPage);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchases: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchProductsAsync();
        StateHasChanged();
    }

    private void AddToCart(PurchaseResponse purchase)
    {
        NavigationManager.NavigateTo($"/purchasedetails/{purchase.Id}");
    }

    private async void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await FetchProductsAsync();
            StateHasChanged();
        }
    }

    private async void NextPage()
    {
        if (purchases.HasNextPage)
        {
            currentPage++;
            await FetchProductsAsync();
            StateHasChanged();
        }
    }
}
